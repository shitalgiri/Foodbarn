{"version":3,"sources":["images/map.svg","images/utensilsImg.svg","Contents.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Contents","props","className","src","restro","featured_image","alt","name","cuisines","href","menu_url","target","rel","utelsilImg","user_rating","aggregate_rating","currency","average_cost_for_two","mapImg","location","address","App","fetchCities","cityId","axios","method","url","dataResponse","headers","params","format","entity_type","entity_id","count","sort","order","then","res","restroName","data","restaurants","setState","selectedCity","state","cityRestaurant","handleChange","event","value","handlePriceChange","priceSelected","this","onChange","htmlFor","id","type","checked","role","aria-label","filter","restaurant","price_range","map","index","showRestaurant","key","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67f5db1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/map.2b7c48a7.svg\";","module.exports = __webpack_public_path__ + \"static/media/utensilsImg.4dd1c615.svg\";","import React from 'react';\nimport mapImg from './images/map.svg';\nimport utelsilImg from './images/utensilsImg.svg'\n\n\n// Use response from API call to create a component to render restaurants information. (Note: The response will contain a “restaurants” field that is an array with 0 or more objects.)\nconst Contents = (props) => {\n    return (\n            <div className=\"restoDetail\">\n            <div>\n            <img src={props.restro.featured_image} alt={props.restro.name} />\n            </div>\n            <div>\n            <h2 className=\"restroName\">{props.restro.name}</h2>\n            <p className=\"menuRow\">\n                <span>{props.restro.cuisines}</span>\n                <a href={props.restro.menu_url} target=\"_blank\" rel=\"noopener noreferrer\"><img src ={utelsilImg} className=\"menuIcon\" alt={'a fork and spoon'}/><span className=\"menu\">Menu</span></a>\n            </p>\n            <p><span>Rating: </span>{props.restro.user_rating.aggregate_rating}</p>\n            <p><span>Average Cost for Two: </span>{props.restro.currency}{props.restro.average_cost_for_two}</p>\n            <p><img src={mapImg} alt={'a location display icon'} className=\"mapIcon\"/><a href={`https://maps.google.com/?q=${props.restro.name} ${props.restro.location.address}`} target=\"_blank\" rel=\"noopener noreferrer\">See on Map</a></p>\n            </div>\n            </div>\n\n    )\n}\n\nexport default Contents;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Contents from \"./Contents.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    // Keep selected city and list of restaurants in the app component state.\n    this.state = {\n      selectedCity: 89,\n      // There should be an empty array for restaurants in an initial state.\n      cityRestaurant: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCities(this.state.selectedCity);\n  }\n  fetchCities = (cityId) => {\n    axios({\n      method: \"GET\",\n      url: \"https://developers.zomato.com/api/v2.1/search\",\n      dataResponse: \"json\",\n      headers: {\n        \"user-key\": \"3b0e9e63572bbbf8a8c2943707d0366e\",\n      },\n      params: {\n        format: \"json\",\n        entity_type: \"city\",\n        entity_id: cityId,\n        count: 20,\n        sort: \"rating\",\n        order: \"desc\",\n      },\n    }).then((res) => {\n      const restroName = res.data.restaurants;\n      this.setState({\n        selectedCity: this.state.selectedCity,\n        cityRestaurant: restroName,\n      });\n    });\n  };\n  //\tUse onChange event listener on dropdown menu to get city name, then map city name to entity_id and search for restaurants using Zomato api, update the state for user’s selection.\n  handleChange = (event) => {\n      // Create state to record user’s selection.\n    this.setState({\n      selectedCity: event.target.value,\n      cityRestaurant: this.state.cityRestaurant,\n    });\n    this.fetchCities(event.target.value);\n  };\n\n  handlePriceChange = (event) => {\n    this.setState({\n      ...this.state,\n      priceSelected: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Food Barn</h1>\n        </header>\n        <main>\n          <div className=\"wrapper quote\">\n            <h2>Food Barn</h2>\n            <q>\n              If more of us valued food and cheer above hoards of gold it would\n              be a merrier world.\n            </q>\n            <p>J.R.R. Tolkien</p>\n          </div>\n          <form className=\"wrapper\">\n            <fieldset\n              onChange={this.handleChange}\n              value={this.state.selectedCity}\n            >\n                <label htmlFor=\"city\">Select City: </label>\n                {/*\tUsers should be able to select the cities provided in a drop-down menu with appropriate entity_id from Zomato API. */}\n                <select id=\"city\">\n                  <option value=\"89\">Toronto</option>\n                  <option value=\"280\">New York City</option>\n                  <option value=\"61\">London</option>\n                  <option value=\"257\">Rome</option>\n                  <option value=\"4\">Bengalore</option>\n                  <option value=\"52\">Singapore</option>\n                  <option value=\"74\">Jakarta</option>\n                  <option value=\"51\">Dubai</option>\n                  <option value=\"260\">Sydney</option>\n                  <option value=\"84\">Prague</option>\n                  <option value=\"59\">Istanbul</option>\n                </select>\n            </fieldset>\n            <fieldset className=\"priceOption\">\n              <input className=\"hidden\" type=\"radio\" value=\"lowCost\" id=\"radio1\" onChange={this.handlePriceChange} checked={this.state.priceSelected === \"lowCost\"}/>\n              <label htmlFor=\"radio1\"><span role=\"img\" aria-label=\"a single dollar sign\">💰</span></label>\n              <input className=\"hidden\" type=\"radio\" value=\"mediumCost\" id=\"radio2\" onChange={this.handlePriceChange} checked={this.state.priceSelected === \"mediumCost\"}/>\n              <label htmlFor=\"radio2\"><span role=\"img\" aria-label=\"a double dollar sign\">💰💰</span></label>\n              <input className=\"hidden\" type=\"radio\" value=\"highCost\" id=\"radio3\" onChange={this.handlePriceChange} checked={this.state.priceSelected === \"highCost\"}/>\n              <label htmlFor=\"radio3\"><span role=\"img\" aria-label=\"a triple dollar sign\">💰💰💰</span></label>\n            </fieldset>\n          </form>\n\n          <div className=\"displayRestaurants wrapper\">\n            {this.state.cityRestaurant.filter((restro) => {\n              if (restro.restaurant.price_range <= 2 && this.state.priceSelected === \"lowCost\") {\n                return true;\n              } else if (restro.restaurant.price_range === 3 && this.state.priceSelected === \"mediumCost\") {\n                return true;\n              } else if(restro.restaurant.price_range >= 4  && this.state.priceSelected === \"highCost\"){\n                return true;\n              } else if (!this.state.priceSelected) {\n                return true;\n              } else {\n                return false;\n              }\n              //\tDisplay results by creating components based on the state(by using .map method):\n            }).map((restro, index) => {\n              return (\n                <Contents\n                  showRestaurant={() => {\n                    this.showRestaurant(index);\n                  }}\n                  restro={restro.restaurant}\n                  key={restro.restaurant.id}\n                />\n              );\n            })}\n          </div>\n        </main>\n        <footer>\n          <h2>©Copyright 2020 <a href=\"https://junocollege.com/\" target=\"blank\">Juno College</a></h2>\n          </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}